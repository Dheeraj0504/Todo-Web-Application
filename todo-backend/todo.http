### 1. Register a New User
POST http://localhost:3000/register 
Content-Type: application/json

{
  "name": "abc",
  "email": "abc@gmail.com",
  "password": "123456"
} 

{
  "name": "Dheeraj Paik",
  "email": "dheeraj1@example.com",
  "password": "password123"
}

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "password": "password456"
}

 
### 2. User Login
POST http://localhost:3000/login 
Content-Type: application/json

{
  "email": "abc@gmail.com",
  "password": "123456"
} 

{
  "email": "dheeraj1@example.com",
  "password": "password123"
}

{
  "email": "john.doe@example.com",
  "password": "password456"
}


### 3. Create a New Todo (using the token obtained from login)
POST http://localhost:3000/add-todo
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI4ZjY5YjAyNi1mODRhLTRiYmUtYmE3NS01NWZmMTdiM2Y3MWUiLCJpYXQiOjE3MzE0MzgzMTd9.g-IxGmqacaOAZgHF5pjewnyeo0OmWwMP-9A0nO3IiGY
Content-Type: application/json

{
  "title": "Buy groceries",
  "status": "pending"
}

{
  "title": "Complete project documentation",
  "status": "pending"
}

{
  "title": "Learn Node.js",
  "status": "in progress"
}

### 4. Get All Todos for Authenticated User
GET http://localhost:3000/get-todos
Authorization: Bearer <YOUR_TOKEN>

### 5. Update a Todo
PUT http://localhost:3000/update-todo/:id
Content-Type: application/json
Authorization: Bearer <YOUR_TOKEN>

{
  "title": "Complete project documentation (updated)",
  "status": "done"
}

{
  "title": "Learn Node.js (updated)",
  "status": "completed"
}

### 6. Delete a Todo
# Replace `<TODO_ID>` with the ID of the todo you want to delete
DELETE http://localhost:3000/todos/<TODO_ID>
Authorization: Bearer <YOUR_TOKEN>

